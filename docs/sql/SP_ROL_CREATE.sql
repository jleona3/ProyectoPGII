USE [TRZ6_CONDOMINIO]

SELECT * FROM TRZ6_ROL GO
SELECT * FROM TRZ6_CAT_ESTADO GO
SELECT * FROM TRZ6_CAT_TIPO_PAGO GO

SELECT COLUMN_NAME
FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = 'TRZ6_CAT_ESTADO'
ORDER BY ORDINAL_POSITION
GO

ALTER TABLE TRZ6_ROL
ADD CONSTRAINT UQ_ROL_NOM UNIQUE (ROL_NOM);

ALTER TABLE TRZ6_ROL
ADD 
    CREADO_POR VARCHAR(100) NOT NULL DEFAULT 'Jorge Luis',
    MODIFICADO_POR VARCHAR(100) NULL,
    FE_MODIFICACION DATETIME NULL;

-- Finalmente lo cambias a NOT NULL
ALTER TABLE TRZ6_ROL
ALTER COLUMN CREADO_POR VARCHAR(100) NOT NULL;

-- 2. Quitar la columna antigua 'ESTADO'
ALTER TABLE TRZ6_ROL
DROP COLUMN ESTADO;

ALTER TABLE TRZ6_ROL
ADD ID_ESTADO INT NOT NULL DEFAULT 1;

-- 3. Agregar las nuevas columnas
ALTER TABLE TRZ6_ROL
ADD 
    ID_ESTADO INT NOT NULL DEFAULT 1, -- Estado por defecto (Activo, por ejemplo)
    CREADO_POR VARCHAR(100) NOT NULL DEFAULT 'Jorge Luis',
    MODIFICADO_POR VARCHAR(100) NULL DEFAULT 'Jorge Luis',
    FE_MODIFICACION DATETIME NULL '2025-08-02 23:14';

sp_help TRZ6_ROL
EXEC sp_fkeys 'TRZ6_ROL';

-- 4. Agregar FK para ID_ESTADO
ALTER TABLE TRZ6_ROL
ADD CONSTRAINT FK_TRZ6_ROL_ESTADO FOREIGN KEY (ID_ESTADO)
REFERENCES TRZ6_CAT_ESTADO(ID_ESTADO);

-- 5. Agregar restricción UNIQUE para ROL_NOM
ALTER TABLE TRZ6_ROL
ADD CONSTRAINT UQ_TRZ6_ROL_NOM UNIQUE (ROL_NOM);

SELECT 
    name, 
    object_id, 
    parent_object_id 
FROM sys.foreign_keys 
WHERE name = 'FK_TRZ6_ROL_ESTADO';

ALTER TABLE TRZ6_ROL
DROP CONSTRAINT FK_TRZ6_ROL_ESTADO;

ALTER TABLE TRZ6_ROL
ADD ID_ESTADO INT NOT NULL DEFAULT 1; -- 1 por defecto (Activo)

-- Crear la FK correctametne
ALTER TABLE TRZ6_ROL
ADD CONSTRAINT FK_TRZ6_ROL_ESTADO
FOREIGN KEY (ID_ESTADO)
REFERENCES TRZ6_CAT_ESTADO(ID_ESTADO);
GO

-- SP 1 – Listar todos (con nombre de estado y formato)
CREATE OR ALTER PROCEDURE SP_L_ROL_01
AS
BEGIN
    SELECT 
        R.ROL_ID,
        R.ROL_NOM,
        CONVERT(VARCHAR(10), R.FEC_CREA, 105) + ' ' +
        RIGHT('0' + CONVERT(VARCHAR(2), 
            CASE WHEN DATEPART(HOUR, R.FEC_CREA) % 12 = 0 THEN 12 ELSE DATEPART(HOUR, R.FEC_CREA) % 12 END
        ), 2) + ':' +
        RIGHT('0' + CONVERT(VARCHAR(2), DATEPART(MINUTE, R.FEC_CREA)), 2) + ' ' +
        CASE WHEN DATEPART(HOUR, R.FEC_CREA) >= 12 THEN 'PM' ELSE 'AM' END AS FEC_CREA,
        R.CREADO_POR,
        R.MODIFICADO_POR,
        CONVERT(VARCHAR(10), R.FE_MODIFICACION, 105) + ' ' +
        RIGHT('0' + CONVERT(VARCHAR(2),
            CASE WHEN DATEPART(HOUR, R.FE_MODIFICACION) % 12 = 0 THEN 12 ELSE DATEPART(HOUR, R.FE_MODIFICACION) % 12 END
        ), 2) + ':' +
        RIGHT('0' + CONVERT(VARCHAR(2), DATEPART(MINUTE, R.FE_MODIFICACION)), 2) + ' ' +
        CASE WHEN DATEPART(HOUR, R.FE_MODIFICACION) >= 12 THEN 'PM' ELSE 'AM' END AS FE_MODIFICACION,
        E.ID_ESTADO,
        E.DESCRIPCION AS ESTADO_DESC
    FROM TRZ6_ROL R
    INNER JOIN TRZ6_CAT_ESTADO E ON R.ID_ESTADO = E.ID_ESTADO
    ORDER BY R.ROL_ID DESC;
END
GO

-- SP 2 – Obtener por ID (con formato de fecha)
CREATE OR ALTER PROCEDURE SP_L_ROL_02
    @ROL_ID INT
AS
BEGIN
    SELECT 
        R.ROL_ID,
        R.ROL_NOM,
        CONVERT(VARCHAR(10), R.FEC_CREA, 105) + ' ' +
        RIGHT('0' + CONVERT(VARCHAR(2), 
            CASE WHEN DATEPART(HOUR, R.FEC_CREA) % 12 = 0 THEN 12 ELSE DATEPART(HOUR, R.FEC_CREA) % 12 END
        ), 2) + ':' +
        RIGHT('0' + CONVERT(VARCHAR(2), DATEPART(MINUTE, R.FEC_CREA)), 2) + ' ' +
        CASE WHEN DATEPART(HOUR, R.FEC_CREA) >= 12 THEN 'PM' ELSE 'AM' END AS FEC_CREA,
        R.CREADO_POR,
        R.MODIFICADO_POR,
        CONVERT(VARCHAR(10), R.FE_MODIFICACION, 105) + ' ' +
        RIGHT('0' + CONVERT(VARCHAR(2),
            CASE WHEN DATEPART(HOUR, R.FE_MODIFICACION) % 12 = 0 THEN 12 ELSE DATEPART(HOUR, R.FE_MODIFICACION) % 12 END
        ), 2) + ':' +
        RIGHT('0' + CONVERT(VARCHAR(2), DATEPART(MINUTE, R.FE_MODIFICACION)), 2) + ' ' +
        CASE WHEN DATEPART(HOUR, R.FE_MODIFICACION) >= 12 THEN 'PM' ELSE 'AM' END AS FE_MODIFICACION,
        E.ID_ESTADO,
        E.DESCRIPCION AS ESTADO_DESC
    FROM TRZ6_ROL R
    INNER JOIN TRZ6_CAT_ESTADO E ON R.ID_ESTADO = E.ID_ESTADO
    WHERE R.ROL_ID = @ROL_ID;
END
GO

-- SP 3 – Insertar
CREATE OR ALTER PROCEDURE SP_I_ROL_01
    @ROL_NOM NVARCHAR(100),
    @ID_ESTADO INT,
    @CREADO_POR NVARCHAR(100)
AS
BEGIN
    IF EXISTS (SELECT 1 FROM TRZ6_ROL WHERE ROL_NOM = @ROL_NOM)
    BEGIN
        RAISERROR('El nombre del rol ya existe.',16,1);
        RETURN;
    END

    INSERT INTO TRZ6_ROL (ROL_NOM, ID_ESTADO, CREADO_POR, FEC_CREA)
    VALUES (@ROL_NOM, @ID_ESTADO, @CREADO_POR, GETDATE());
END
GO

-- SP 4 - LISTAR
CREATE OR ALTER PROCEDURE SP_U_ROL_01
    @ROL_ID INT,
    @ROL_NOM VARCHAR(100),
    @ID_ESTADO INT,
    @MODIFICADO_POR VARCHAR(100)
AS
BEGIN
    -- Validar que no exista otro rol con el mismo nombre
    IF EXISTS (SELECT 1 FROM TRZ6_ROL WHERE ROL_NOM = @ROL_NOM AND ROL_ID <> @ROL_ID)
    BEGIN
        RAISERROR('DUPLICATE_NAME', 16, 1);
        RETURN;
    END

    UPDATE TRZ6_ROL
    SET 
        ROL_NOM = @ROL_NOM,
        ID_ESTADO = @ID_ESTADO,
        MODIFICADO_POR = @MODIFICADO_POR,
        FE_MODIFICACION = GETDATE()
    WHERE ROL_ID = @ROL_ID;
END
GO

-- SP 5 - LISTAR
CREATE OR ALTER PROCEDURE SP_D_ROL_01
    @ROL_ID INT
AS
BEGIN
    DELETE FROM TRZ6_ROL WHERE ROL_ID = @ROL_ID;
END
GO

-- SP_D_ROL_01 – Elimina
CREATE OR ALTER PROCEDURE SP_D_ROL_01
    @ROL_ID INT
AS
BEGIN
    DELETE FROM TRZ6_ROL WHERE ROL_ID = @ROL_ID;
END
GO

-- 1. SP_O_ROL_01 – Listar todos
CREATE OR ALTER PROCEDURE SP_O_ROL_01
AS
BEGIN
    SELECT 
        R.ROL_ID,
        R.ROL_NOM,
        R.CREADO_POR,
        CONVERT(VARCHAR(10), R.FEC_CREA, 105) + ' ' +
        RIGHT('0' + CONVERT(VARCHAR(2), 
            CASE WHEN DATEPART(HOUR, R.FEC_CREA) % 12 = 0 THEN 12 ELSE DATEPART(HOUR, R.FEC_CREA) % 12 END
        ), 2) + ':' +
        RIGHT('0' + CONVERT(VARCHAR(2), DATEPART(MINUTE, R.FEC_CREA)), 2) + ' ' +
        CASE WHEN DATEPART(HOUR, R.FEC_CREA) >= 12 THEN 'PM' ELSE 'AM' END AS FEC_CREA,
        R.MODIFICADO_POR,
        CONVERT(VARCHAR(10), R.FE_MODIFICACION, 105) + ' ' +
        RIGHT('0' + CONVERT(VARCHAR(2),
            CASE WHEN DATEPART(HOUR, R.FE_MODIFICACION) % 12 = 0 THEN 12 ELSE DATEPART(HOUR, R.FE_MODIFICACION) % 12 END
        ), 2) + ':' +
        RIGHT('0' + CONVERT(VARCHAR(2), DATEPART(MINUTE, R.FE_MODIFICACION)), 2) + ' ' +
        CASE WHEN DATEPART(HOUR, R.FE_MODIFICACION) >= 12 THEN 'PM' ELSE 'AM' END AS FE_MODIFICACION,
        E.DESCRIPCION AS ROL_ESTADO
    FROM 
        TRZ6_ROL R
        INNER JOIN TRZ6_CAT_ESTADO E ON R.ID_ESTADO = E.ID_ESTADO
    ORDER BY R.ROL_ID DESC;
END
GO

-- 2. SP_I_ROL_01 – Insertar
CREATE OR ALTER PROCEDURE SP_I_ROL_01
    @ROL_NOM VARCHAR(100),
    @ID_ESTADO INT,
    @CREADO_POR VARCHAR(100)
AS
BEGIN
    -- Validar que el nombre no exista
    IF EXISTS (SELECT 1 FROM TRZ6_ROL WHERE ROL_NOM = @ROL_NOM)
    BEGIN
        RAISERROR('El nombre del rol ya existe.', 16, 1);
        RETURN;
    END

    INSERT INTO TRZ6_ROL (
        ROL_NOM,
        ID_ESTADO,
        CREADO_POR,
        FEC_CREA
    )
    VALUES (
        @ROL_NOM,
        @ID_ESTADO,
        @CREADO_POR,
        GETDATE()
    );
END
GO

-- 3. SP_U_ROL_01 – Actualizar
CREATE OR ALTER PROCEDURE [dbo].[SP_U_ROL_01]
    @ROL_ID INT,
    @ROL_NOM VARCHAR(100),
    @ID_ESTADO INT,
    @MODIFICADO_POR VARCHAR(100)
AS
BEGIN
    -- Validar que el nombre no exista para otro registro
    IF EXISTS (SELECT 1 FROM TRZ6_ROL WHERE ROL_NOM = @ROL_NOM AND ROL_ID <> @ROL_ID)
    BEGIN
        RAISERROR('El nombre del rol ya existe.', 16, 1);
        RETURN;
    END

    UPDATE TRZ6_ROL
    SET
        ROL_NOM = @ROL_NOM,
        ID_ESTADO = @ID_ESTADO,
        MODIFICADO_POR = @MODIFICADO_POR,
        FE_MODIFICACION = GETDATE()
    WHERE ROL_ID = @ROL_ID;
END
GO

-- 4. SP_O_ROL_ID_01 – Obtener por ID
CREATE OR ALTER PROCEDURE SP_O_ROL_ID_01
    @ROL_ID INT
AS
BEGIN
    SELECT 
        R.ROL_ID,
        R.ROL_NOM,
        R.ID_ESTADO,
        E.DESCRIPCION AS ROL_ESTADO,
        R.CREADO_POR,
        CONVERT(VARCHAR(10), R.FEC_CREA, 105) + ' ' +
        RIGHT('0' + CONVERT(VARCHAR(2), 
            CASE WHEN DATEPART(HOUR, R.FEC_CREA) % 12 = 0 THEN 12 ELSE DATEPART(HOUR, R.FEC_CREA) % 12 END
        ), 2) + ':' +
        RIGHT('0' + CONVERT(VARCHAR(2), DATEPART(MINUTE, R.FEC_CREA)), 2) + ' ' +
        CASE WHEN DATEPART(HOUR, R.FEC_CREA) >= 12 THEN 'PM' ELSE 'AM' END AS FEC_CREA,
        R.MODIFICADO_POR,
        CONVERT(VARCHAR(10), R.FE_MODIFICACION, 105) + ' ' +
        RIGHT('0' + CONVERT(VARCHAR(2),
            CASE WHEN DATEPART(HOUR, R.FE_MODIFICACION) % 12 = 0 THEN 12 ELSE DATEPART(HOUR, R.FE_MODIFICACION) % 12 END
        ), 2) + ':' +
        RIGHT('0' + CONVERT(VARCHAR(2), DATEPART(MINUTE, R.FE_MODIFICACION)), 2) + ' ' +
        CASE WHEN DATEPART(HOUR, R.FE_MODIFICACION) >= 12 THEN 'PM' ELSE 'AM' END AS FE_MODIFICACION
    FROM 
        TRZ6_ROL R
        INNER JOIN TRZ6_CAT_ESTADO E ON R.ID_ESTADO = E.ID_ESTADO
    WHERE 
        R.ROL_ID = @ROL_ID;
END
GO

select * from TRZ6_USUARIO go
EXEC SP_L_USUARIO_03 'jorge.leon@hotmail.es', '5678'

/******************************* ACTUALIZACION DE PROCEDIMIENTOS *********************************/

-- 1. SP_I_ROL_01 – Insertar
CREATE OR ALTER PROCEDURE SP_I_ROL_01
    @ROL_NOM VARCHAR(150),
    @ID_ESTADO INT,
    @CREADO_POR VARCHAR(100)
AS
BEGIN
    SET NOCOUNT ON;

    INSERT INTO TRZ6_ROL (ROL_NOM, ID_ESTADO, FEC_CREA, CREADO_POR)
    VALUES (@ROL_NOM, @ID_ESTADO, GETDATE(), @CREADO_POR);
END
GO

-- 2. SP_U_ROL_01 – Actualizar
CREATE OR ALTER PROCEDURE SP_U_ROL_01
    @ROL_ID INT,
    @ROL_NOM VARCHAR(150),
    @ID_ESTADO INT,
    @MODIFICADO_POR VARCHAR(100)
AS
BEGIN
    SET NOCOUNT ON;

    UPDATE TRZ6_ROL
    SET 
        ROL_NOM = @ROL_NOM,
        ID_ESTADO = @ID_ESTADO,
        MODIFICADO_POR = @MODIFICADO_POR,
        FE_MODIFICACION = GETDATE()
    WHERE ROL_ID = @ROL_ID;
END
GO

-- 3. SP_D_ROL_01 – Eliminar (Lógico)
CREATE OR ALTER PROCEDURE SP_D_ROL_01
    @ROL_ID INT,
    @MODIFICADO_POR VARCHAR(100)
AS
BEGIN
    SET NOCOUNT ON;

    UPDATE TRZ6_ROL
    SET 
        ID_ESTADO = 7, -- Estado "Deshabilitado"
        MODIFICADO_POR = @MODIFICADO_POR,
        FE_MODIFICACION = GETDATE()
    WHERE ROL_ID = @ROL_ID;
END
GO

-- 4. SP_L_ROL_01 – Listar todos
CREATE OR ALTER PROCEDURE SP_L_ROL_01
AS
BEGIN
    SET NOCOUNT ON;

    SELECT
        R.ROL_ID,
        R.ROL_NOM,
        R.ID_ESTADO,
        E.DESCRIPCION AS ESTADO_DESC,
        CONVERT(VARCHAR(10), R.FEC_CREA, 105) + ' ' +
        RIGHT('0' + CONVERT(VARCHAR(2), 
            CASE WHEN DATEPART(HOUR, R.FEC_CREA) % 12 = 0 THEN 12 ELSE DATEPART(HOUR, R.FEC_CREA) % 12 END
        ), 2) + ':' +
        RIGHT('0' + CONVERT(VARCHAR(2), DATEPART(MINUTE, R.FEC_CREA)), 2) + ' ' +
        CASE WHEN DATEPART(HOUR, R.FEC_CREA) >= 12 THEN 'PM' ELSE 'AM' END AS FEC_CREA,
        R.CREADO_POR,
        R.MODIFICADO_POR,
        CONVERT(VARCHAR(10), R.FE_MODIFICACION, 105) + ' ' +
        RIGHT('0' + CONVERT(VARCHAR(2),
            CASE WHEN DATEPART(HOUR, R.FE_MODIFICACION) % 12 = 0 THEN 12 ELSE DATEPART(HOUR, R.FE_MODIFICACION) % 12 END
        ), 2) + ':' +
        RIGHT('0' + CONVERT(VARCHAR(2), DATEPART(MINUTE, R.FE_MODIFICACION)), 2) + ' ' +
        CASE WHEN DATEPART(HOUR, R.FE_MODIFICACION) >= 12 THEN 'PM' ELSE 'AM' END AS FE_MODIFICACION
    FROM TRZ6_ROL R
    INNER JOIN TRZ6_CAT_ESTADO E ON R.ID_ESTADO = E.ID_ESTADO;
END
GO

-- 5. SP_L_ROL_02 – Listar por ID
CREATE OR ALTER PROCEDURE SP_L_ROL_02
    @ROL_ID INT
AS
BEGIN
    SET NOCOUNT ON;

    SELECT
        R.ROL_ID,
        R.ROL_NOM,
        R.ID_ESTADO,
        E.DESCRIPCION AS ESTADO_DESC,
        CONVERT(VARCHAR(10), R.FEC_CREA, 105) + ' ' +
        RIGHT('0' + CONVERT(VARCHAR(2), 
            CASE WHEN DATEPART(HOUR, R.FEC_CREA) % 12 = 0 THEN 12 ELSE DATEPART(HOUR, R.FEC_CREA) % 12 END
        ), 2) + ':' +
        RIGHT('0' + CONVERT(VARCHAR(2), DATEPART(MINUTE, R.FEC_CREA)), 2) + ' ' +
        CASE WHEN DATEPART(HOUR, R.FEC_CREA) >= 12 THEN 'PM' ELSE 'AM' END AS FEC_CREA,
        R.CREADO_POR,
        R.MODIFICADO_POR,
        CONVERT(VARCHAR(10), R.FE_MODIFICACION, 105) + ' ' +
        RIGHT('0' + CONVERT(VARCHAR(2),
            CASE WHEN DATEPART(HOUR, R.FE_MODIFICACION) % 12 = 0 THEN 12 ELSE DATEPART(HOUR, R.FE_MODIFICACION) % 12 END
        ), 2) + ':' +
        RIGHT('0' + CONVERT(VARCHAR(2), DATEPART(MINUTE, R.FE_MODIFICACION)), 2) + ' ' +
        CASE WHEN DATEPART(HOUR, R.FE_MODIFICACION) >= 12 THEN 'PM' ELSE 'AM' END AS FE_MODIFICACION
    FROM TRZ6_ROL R
    INNER JOIN TRZ6_CAT_ESTADO E ON R.ID_ESTADO = E.ID_ESTADO
    WHERE R.ROL_ID = @ROL_ID;
END
GO

