USE [TRZ6_CONDOMINIO]

SELECT COLUMN_NAME
FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = 'TRZ6_CONDOMINIO'
ORDER BY ORDINAL_POSITION
GO

select * from TRZ6_CONDOMINIO go

-- 1. Agregar los nuevos campos
ALTER TABLE TRZ6_CONDOMINIO
ADD 
    CREADO_POR VARCHAR(150) NULL,
    MODIFICADO_POR VARCHAR(150) NULL,
    FE_MODIFICACION DATETIME NULL;

-- 2. Actualizar registros existentes
UPDATE TRZ6_CONDOMINIO
SET 
    CREADO_POR = 'Sistema',
    MODIFICADO_POR = 'Sistema',
    FE_MODIFICACION = DATEADD(HOUR, -6, GETUTCDATE()); -- Hora local Guatemala

-- 1. Verificar si hay decimales antes de cambiarlo
UPDATE TRZ6_CONDOMINIO
SET METROS_M2 = ROUND(METROS_M2, 0);

-- 2. Cambiar el tipo de dato a INT
ALTER TABLE TRZ6_CONDOMINIO
ALTER COLUMN METROS_M2 INT;

-- 1. Revisar y ajustar la tabla TRZ6_CONDOMINIO
-- Asegurar que la tabla existe
IF NOT EXISTS (SELECT 1 FROM sysobjects WHERE name='TRZ6_CONDOMINIO' AND xtype='U')
BEGIN
    CREATE TABLE TRZ6_CONDOMINIO (
        ID_APTO INT IDENTITY(1,1) PRIMARY KEY,
        NUM_TORRE INT NOT NULL,
        NIVEL INT NOT NULL,
        NUM_APTO INT NOT NULL,
        METROS_M2 DECIMAL(10,2) NOT NULL,
        ID_ESTADO INT NOT NULL,
        FE_CREACION DATETIME NOT NULL,
        CREADO_POR VARCHAR(100) NOT NULL,
        MODIFICADO_POR VARCHAR(100) NULL,
        FE_MODIFICACION DATETIME NULL
    );
END
GO

-- 2. Crear índice único para NUM_APTO
-- Si ya existía, eliminarlo para recrearlo
IF EXISTS (SELECT 1 FROM sys.indexes WHERE name='UQ_NUM_APTO' AND object_id = OBJECT_ID('TRZ6_CONDOMINIO'))
    ALTER TABLE TRZ6_CONDOMINIO DROP CONSTRAINT UQ_NUM_APTO;

-- Crear restricción única
ALTER TABLE TRZ6_CONDOMINIO
ADD CONSTRAINT UQ_NUM_APTO UNIQUE (NUM_APTO);

-- 3. Relación con Estados
IF NOT EXISTS (SELECT 1 FROM sysobjects WHERE name='TRZ6_CAT_ESTADO' AND xtype='U')
BEGIN
    CREATE TABLE TRZ6_CAT_ESTADO (
        ID_ESTADO INT IDENTITY(1,1) PRIMARY KEY,
        DESCRIPCION VARCHAR(100) NOT NULL
    );

    -- Insertar algunos estados ejemplo
    INSERT INTO TRZ6_CAT_ESTADO (DESCRIPCION) VALUES ('Disponible'), ('Ocupado'), ('Mantenimiento');
END
GO

ALTER TABLE TRZ6_CONDOMINIO
WITH CHECK ADD CONSTRAINT FK_CONDOMINIO_ESTADO FOREIGN KEY (ID_ESTADO)
REFERENCES TRZ6_CAT_ESTADO(ID_ESTADO);


-- 4. Stored Procedures CRUD
CREATE OR ALTER PROCEDURE SP_L_CONDOMINIO_TODOS
AS
BEGIN
    SELECT
        C.ID_APTO,
        C.NUM_TORRE,
        C.NIVEL,
        C.NUM_APTO,
        C.METROS_M2,
        C.ID_ESTADO,
        E.DESCRIPCION AS NOMBRE_ESTADO,
        C.CREADO_POR,
        CONVERT(VARCHAR(10), C.FE_CREACION, 105) + ' ' +
        RIGHT('0' + CONVERT(VARCHAR(2), CASE WHEN DATEPART(HOUR, C.FE_CREACION) % 12 = 0 THEN 12 ELSE DATEPART(HOUR, C.FE_CREACION) % 12 END), 2) + ':' +
        RIGHT('0' + CONVERT(VARCHAR(2), DATEPART(MINUTE, C.FE_CREACION)), 2) + ' ' +
        CASE WHEN DATEPART(HOUR, C.FE_CREACION) >= 12 THEN 'PM' ELSE 'AM' END AS FE_CREACION,
        C.MODIFICADO_POR,
        CONVERT(VARCHAR(10), C.FE_MODIFICACION, 105) + ' ' +
        RIGHT('0' + CONVERT(VARCHAR(2), CASE WHEN DATEPART(HOUR, C.FE_MODIFICACION) % 12 = 0 THEN 12 ELSE DATEPART(HOUR, C.FE_MODIFICACION) % 12 END), 2) + ':' +
        RIGHT('0' + CONVERT(VARCHAR(2), DATEPART(MINUTE, C.FE_MODIFICACION)), 2) + ' ' +
        CASE WHEN DATEPART(HOUR, C.FE_MODIFICACION) >= 12 THEN 'PM' ELSE 'AM' END AS FE_MODIFICACION
    FROM TRZ6_CONDOMINIO C
    INNER JOIN TRZ6_CAT_ESTADO E ON C.ID_ESTADO = E.ID_ESTADO
    ORDER BY C.ID_APTO DESC;
END
GO

-- Obtener por ID
CREATE OR ALTER PROCEDURE SP_O_CONDOMINIO_01
    @ID_APTO INT
AS
BEGIN
    SELECT *
    FROM TRZ6_CONDOMINIO
    WHERE ID_APTO = @ID_APTO;
END
GO

-- Insertar (con validación de duplicidad)
CREATE OR ALTER PROCEDURE SP_I_CONDOMINIO_01
    @NUM_TORRE INT,
    @NIVEL INT,
    @NUM_APTO INT,
    @METROS_M2 INT,
    @ID_ESTADO INT,
    @CREADO_POR VARCHAR(100)
AS
BEGIN
    DECLARE @FechaActual DATETIME = DATEADD(HOUR, -6, GETUTCDATE());

    -- Validar que los metros sean mayores a 0
    IF @METROS_M2 <= 0
    BEGIN
        RAISERROR('Los metros cuadrados deben ser mayores a 0.', 16, 1);
        RETURN;
    END

    -- Validar duplicidad
    IF EXISTS (SELECT 1 FROM TRZ6_CONDOMINIO WHERE NUM_APTO = @NUM_APTO)
    BEGIN
        RAISERROR('El número de apartamento ya existe. No se puede duplicar.', 16, 1);
        RETURN;
    END

    INSERT INTO TRZ6_CONDOMINIO (NUM_TORRE, NIVEL, NUM_APTO, METROS_M2, ID_ESTADO, CREADO_POR, FE_CREACION, MODIFICADO_POR, FE_MODIFICACION)
    VALUES (@NUM_TORRE, @NIVEL, @NUM_APTO, @METROS_M2, @ID_ESTADO, @CREADO_POR, @FechaActual, @CREADO_POR, @FechaActual);
END
GO

-- Actualizar (con validación)
CREATE OR ALTER PROCEDURE SP_U_CONDOMINIO_01
    @ID_APTO INT,
    @NUM_TORRE INT,
    @NIVEL INT,
    @NUM_APTO INT,
    @METROS_M2 INT,
    @ID_ESTADO INT,
    @MODIFICADO_POR VARCHAR(100)
AS
BEGIN
    DECLARE @FechaActual DATETIME = DATEADD(HOUR, -6, GETUTCDATE());

    -- Validar que los metros sean mayores a 0
    IF @METROS_M2 <= 0
    BEGIN
        RAISERROR('Los metros cuadrados deben ser mayores a 0.', 16, 1);
        RETURN;
    END

    -- Validar duplicidad excluyendo el mismo registro
    IF EXISTS (SELECT 1 FROM TRZ6_CONDOMINIO WHERE NUM_APTO = @NUM_APTO AND ID_APTO != @ID_APTO)
    BEGIN
        RAISERROR('El número de apartamento ya existe. No se puede duplicar.', 16, 1);
        RETURN;
    END

    UPDATE TRZ6_CONDOMINIO
    SET NUM_TORRE = @NUM_TORRE,
        NIVEL = @NIVEL,
        NUM_APTO = @NUM_APTO,
        METROS_M2 = @METROS_M2,
        ID_ESTADO = @ID_ESTADO,
        MODIFICADO_POR = @MODIFICADO_POR,
        FE_MODIFICACION = @FechaActual
    WHERE ID_APTO = @ID_APTO;
END
GO

-- Eliminar
CREATE OR ALTER PROCEDURE SP_D_CONDOMINIO_01
    @ID_APTO INT
AS
BEGIN
    DELETE FROM TRZ6_CONDOMINIO WHERE ID_APTO = @ID_APTO;
END
GO